; platformio.ini - VSCode + PlatformIO optimized dual target configuration
[platformio]
default_envs = desktop    ; Start with simulator for fast development
src_dir = src
include_dir = include
lib_dir = lib
data_dir = data

; Common settings shared between environments
[env]
lib_deps = 
    lvgl/lvgl@9.3.0                     ; Pinned version
build_flags = 
    -D LV_CONF_PATH="\"${PROJECT_INCLUDE_DIR}/lv_conf.h\""
    -I include
    -D LV_CONF_INCLUDE_SIMPLE
    -I ${PROJECT_INCLUDE_DIR}
    -I ${PROJECT_SRC_DIR}
    -std=c++17
    -Wall
    -Wextra
    -Isrc/components
    -Isrc/components/controls
    -Isrc/components/parameter
    -Isrc/components/layout
    -Isrc/components/app
    -Isrc/components/ui
    -Isrc/components/fonts
    -Isrc/hardware
    -Isrc/include
    -Iinclude/
    -Isrc/assets/fonts
    -Iassets
    -Isrc
build_unflags = 
    -std=gnu++11

; ========================================
; DESKTOP SIMULATOR ENVIRONMENT
; ========================================
[env:desktop]
platform = native
build_flags = 
    ${env.build_flags}              
    -D LV_USE_LOG=1
    -D LV_LOG_LEVEL=LV_LOG_LEVEL_INFO
    -D LV_USE_SDL=1
    -std=c++17
    -pthread
    !pkg-config --cflags sdl2
    !pkg-config --libs sdl2
    !pkg-config --cflags --libs alsa    ; For RtMidi on Linux
    -D__LINUX_ALSA__                    ; Tell RtMidi to use ALSA backend
    -D__LITTLE_ENDIAN__                 ; Linux endianness
    -DHAVE_GETTIMEOFDAY                 ; Linux timing

lib_deps = 
    lvgl/lvgl@9.3.0                     ; Pinned version
    ; RtMidi will be installed by our build script
    file://lib/rtmidi_linux

# Remove all the complex exclusions - not needed with clean library
build_src_filter = 
    +<*> 
    -<hardware/ESP32Display.cpp>
    -<hardware/LGFX_ST7796S.h>
    -<hardware/ESP32MidiInterface.cpp>
    -<test_helpers/*>
    -<components/midi/ESP32USBMidiBackend.cpp>  ; ESP32-only backend

build_unflags =
    -std=gnu++11

lib_ldf_mode = off    ; Disable automatic dependency finding (fastest)
lib_compat_mode = strict    ; Only compatible libraries
lib_archive = yes          ; Use library archives for faster builds

# Run our RtMidi installation script BEFORE dependency resolution
extra_scripts = 
    pre:scripts/install_rtmidi.py

build_type = debug
monitor_flags = 
    --echo


; ========================================
; EXPERIMENTAL: Arduino Core 3.x with pioarduino fork
; ========================================
[env:rymcu-esp32-s3-arduino3x]
platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip
platform_packages = 
    toolchain-xtensa-esp32s3@8.4.0+2021r2-patch5
board = esp32-s3-devkitc-1-n16r8v
monitor_port = /dev/ttyACM0  ; or whichever /dev/ttyACM* matches your Espressif device
framework = arduino
monitor_speed = 115200
monitor_filters = esp32_exception_decoder
upload_speed = 921600
upload_protocol = esptool
upload_flags = 
    --before=default_reset
    --after=hard_reset
build_flags = 
    -D ESP32_BUILD=1
    -D BOARD_HAS_PSRAM
    -D CONFIG_SPIRAM_USE_CAPS_ALLOC=1
    -D LV_USE_LOG=1
    -D LV_LOG_LEVEL=LV_LOG_LEVEL_INFO
    -D LV_TICK_CUSTOM=1
    -D LV_MEM_CUSTOM=1
    -D CORE_DEBUG_LEVEL=3
    -D ARDUINO_USB_MODE=0              # Enable native USB-OTG mode (0 = USB-OTG)
    -D ARDUINO_USB_CDC_ON_BOOT=0       # Disable CDC completely
    -D USE_TINYUSB                     # Enable TinyUSB stack 
    -D CFG_TUD_MIDI=1                  # Enable TinyUSB MIDI device
    -D CFG_TUD_MIDI_EP_BUFSIZE=64      # MIDI endpoint buffer size
    -D CFG_TUD_CDC=0                   # Disable CDC completely
    -D ARDUINO_USB_MSC_OqN_BOOT=0       # Disable MSC
    -D ARDUINO_USB_DFU_ON_BOOT=0       # Disable DFU
    -D CORE_DEBUG_LEVEL=1              # Enable error logging
    -I include/

lib_deps = 
    ${env.lib_deps}
    bodmer/TFT_eSPI@2.5.43
    ; https://github.com/lovyan03/LovyanGFX.git#5438181 ; Use pinned commit that works with Arduino Core 3.x
    lovyan03/LovyanGFX@^1.1.16
    https://github.com/tttapa/Control-Surface.git ; Add Control-Surface back

lib_ignore = 
    MIDIUSB
    rtmidi_linux

build_src_filter = 
    +<*>
    -<hal/desktop/>
    +<hal/esp32/>
    -<**/test_helpers/>
    -<test_*.cpp>                    ; Exclude test files for now
    -<components/midi/RtMidiBackend.cpp>    ; RtMidi not available on ESP32

; ========================================
; TESTING ENVIRONMENTS
; ========================================

; Native unit tests (fast, desktop)
[env:native_test]
platform = native
test_framework = unity
build_flags = 
    ${env.build_flags}
    -D UNIT_TEST
    -D LV_USE_LOG=0  ; Disable LVGL logging for tests
    -std=c++17
test_filter = test_native
lib_deps = 
    ${env.lib_deps}
build_src_filter = 
    +<*>
    -<hardware/ESP32Display.cpp>
    -<hardware/LGFX_ST7796S.h>
    -<components/midi/ESP32USBMidiBackend.cpp>
    -<components/midi/HardwareMidiBackend.cpp>
    -<main.cpp>

; ESP32 embedded tests (slower, on-device)
[env:esp32_test]
platform = espressif32
board = esp32-s3-devkitc-1-n16r8v
framework = arduino
test_framework = unity
test_filter = test_embedded
build_flags = 
    ${env.build_flags}
    -D ESP32_BUILD=1
    -D UNIT_TEST
lib_deps = 
    ${env.lib_deps}