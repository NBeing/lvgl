#include "RtMidiBackend.h"
#include <iostreaUnifiedMidiManager::ConnectionStatus RtMidiBackend::getStatus() const {
    if (!midi_handler_) {
        return UnifiedMidiManager::ConnectionStatus::DISCONNECTED;
    }
    
    return midi_handler_->isConnected() ? 
        UnifiedMidiManager::ConnectionStatus::CONNECTED :
        UnifiedMidiManager::ConnectionStatus::DISCONNECTED;
}defined(ESP32_BUILD)

RtMidiBackend::RtMidiBackend() {
    midi_handler_ = std::make_unique<MidiHandler>();
}

RtMidiBackend::~RtMidiBackend() {
    cleanup();
}

bool RtMidiBackend::initialize() {
    if (initialized_) return true;
    
    std::cout << "[RtMidi] Initializing USB MIDI backend..." << std::endl;
    
    if (!midi_handler_) {
        std::cout << "[RtMidi] ERROR: MidiHandler is null" << std::endl;
        return false;
    }
    
    // Try to connect using the existing MidiHandler
    if (!midi_handler_->initialize()) {
        std::cout << "[RtMidi] Failed to initialize MidiHandler" << std::endl;
        return false;
    }
    
    initialized_ = true;
    std::cout << "[RtMidi] USB MIDI backend initialized successfully" << std::endl;
    std::cout << "[RtMidi] Status: " << midi_handler_->getConnectionStatus() << std::endl;
    
    return true;
}

void RtMidiBackend::cleanup() {
    if (midi_handler_) {
        // MidiHandler doesn't have cleanup method - just reset
        midi_handler_.reset();
    }
    initialized_ = false;
    std::cout << "[RtMidi] Backend cleaned up" << std::endl;
}

UnifiedMidiManager::ConnectionStatus RtMidiBackend::getStatus() const {
    if (!initialized_ || !midi_handler_) {
        return ConnectionStatus::DISCONNECTED;
    }
    
    return midi_handler_->isConnected() ? 
        ConnectionStatus::CONNECTED : 
        ConnectionStatus::DISCONNECTED;
}

void RtMidiBackend::sendMessage(uint8_t status, uint8_t data1, uint8_t data2) {
    if (!midi_handler_ || !midi_handler_->isConnected()) {
        return;
    }
    
    // Extract channel and command from status byte
    uint8_t channel = (status & 0x0F) + 1; // Convert to 1-16 range
    uint8_t command = status & 0xF0;
    
    switch (command) {
        case 0x80: // Note Off
            midi_handler_->sendNoteOff(channel, data1, data2);
            break;
        case 0x90: // Note On
            midi_handler_->sendNoteOn(channel, data1, data2);
            break;
        case 0xB0: // Control Change
            midi_handler_->sendControlChange(channel, data1, data2);
            break;
        case 0xC0: // Program Change
            // MidiHandler doesn't have sendProgramChange, simulate with CC
            std::cout << "[RtMidi] Program Change " << (int)data1 << " (simulated)" << std::endl;
            break;
        case 0xE0: // Pitch Bend
            // MidiHandler doesn't have sendPitchBend, simulate with CC
            std::cout << "[RtMidi] Pitch Bend " << (int)data1 << "," << (int)data2 << " (simulated)" << std::endl;
            break;
        default:
            std::cout << "[RtMidi] Unsupported MIDI command: 0x" << std::hex << (int)command << std::dec << std::endl;
            break;
    }
    
    messages_sent_++;
}

void RtMidiBackend::sendMessage(uint8_t status) {
    if (!midi_handler_ || !midi_handler_->isConnected()) {
        return;
    }
    
    // Handle system real-time messages
    switch (status) {
        case 0xF8: // MIDI Clock
        case 0xFA: // MIDI Start
        case 0xFB: // MIDI Continue
        case 0xFC: // MIDI Stop
        case 0xFE: // Active Sensing
        case 0xFF: // System Reset
            // RtMidi doesn't have direct system real-time support in our MidiHandler
            // Log for now - could extend MidiHandler if needed
            std::cout << "[RtMidi] System message: 0x" << std::hex << (int)status << std::dec << std::endl;
            break;
        default:
            std::cout << "[RtMidi] Unknown single-byte message: 0x" << std::hex << (int)status << std::dec << std::endl;
            break;
    }
    
    messages_sent_++;
}

void RtMidiBackend::update() {
    if (midi_handler_) {
        midi_handler_->update();
    }
}

#endif // !defined(ESP32_BUILD)
